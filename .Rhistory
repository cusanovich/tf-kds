#  winnercensusfactors = censusfactors[,2][censusfactors[,2] %in% winners]
winnerfactornames = as.character(factors[match(winnerfactors,factors[,3]),1])
winnertfs[[i-3]] = c(matchgene,winnerfactornames)
names(winnertfs)[i-3] = currgene
winnernobbers[[i-3]] = intersect(winners,winning)
names(winnernobbers)[i-3] = currgene
currresultsmatrix = resultsmatrix[match(commongenes,rownames(resultsmatrix)),]
matrixcol = grep(matchgene,colnames(currresultsmatrix))
downstreamcol = matrixcol
for(k in 1:length(winnerfactornames)){
downstreamcol = c(downstreamcol,match(winnerfactornames[k],colnames(currresultsmatrix)))
}
if(length(winnerfactornames) == 0){
downstreamcol = downstreamcol[1]
}
if(length(matrixcol) < 1 & length(downstreamcol) < 1){
next
}
if(length(matrixcol) > 1){
print(paste0("Whoa! ",matchgene," matches too many columns in the binding matrix!!!"))
next
}
boundgenes = rownames(currresultsmatrix)[which(currresultsmatrix[,matrixcol] > 0)]
downstreambound = rownames(currresultsmatrix)[which(rowSums(as.matrix(currresultsmatrix[,downstreamcol])) > 0)]
if(length(boundgenes) == 0 & length(downstreambound) == 0){
print(paste0("Whoa! ",matchgene," doesn't bind anything!!!"))
next
}
q = length(intersect(winners,boundgenes)) - 1
if(length(boundgenes) == 0){
q = 0
}
m = length(winners)
q.down = length(intersect(winners,downstreambound)) - 1
relaxedwinners = currmaster[which(currmaster[,2]<=relaxed_threshold),1]
m.relaxed = length(relaxedwinners)
n = length(unique(currmaster[,1])) - m
n.relaxed = length(unique(currmaster[,1])) - m.relaxed
k = length(boundgenes)
k.down = length(downstreambound)
q.relaxed = length(intersect(relaxedwinners,boundgenes)) - 1
p = phyper(q,m,n,k, lower.tail=FALSE)
if(q == 0){
p = 1
}
p.relaxed = phyper(q.relaxed,m.relaxed,n.relaxed,k, lower.tail=FALSE)
p.down = phyper(q.down,m,n,k.down,lower.tail=FALSE)
newline = c(currgene,matchgene,(n+m),k,m,m.relaxed,ifelse(q>0,q+1,q),
(q.relaxed+1),p,p.relaxed,k.down,(q.down+1),
length(intersect(relaxedwinners,downstreambound)),p.down)
bindingmatrix = rbind(bindingmatrix,newline)
listspot = match(currgene,names(master[[2]]))
j = c((listspot*2-1),(listspot*2))
currps = master[[1]][commonind,c(2,i)]
bindind = match(boundgenes,currps[,1])
downind = match(downstreambound,currps[,1])
ssize = min(length(downind),(length(commonind) - length(downind)))
boundps[[i-3]] = -log10(currps[sample(downind,ssize),2])
sampleps[[i-3]] = -log10(currps[sample(c(1:dim(currps)[1])[-downind],ssize),2])
top = max(max(boundps[[i-3]],sampleps[[i-3]]))
dense = density(currps[,2])
plot(dense,lwd=3,main=paste0(matchgene," P-values"),xlab="P-value")
legend("topright",legend=c("FDR 0.05","FDR 0.20"),fill=c("black","dodgerblue2"))
abline(v=max(currps[which(currmaster[,2] <= de_threshold),2]),lty=2,lwd=2)
abline(v=max(currps[which(currmaster[,2] <= relaxed_threshold),2]),lty=2,lwd=2,col="dodgerblue2")
plot(sort(-log10(ppoints(ssize))),sort(boundps[[i-3]]),
main=paste0(matchgene," QQ Plot"),pch=20,col="indianred",ylim=c(0,top),
xlab="Expected -log10(P-value)",ylab="Observed -log10(P-value)")
legend("topleft",c("Bound Genes","Unbound Genes"),fill=c("indianred","black"))
abline(a=0,b=1,lwd=2,lty="dashed",col="dodgerblue2")
points(sort(-log10(ppoints(ssize))),sort(sampleps[[i-3]]),pch=20)
points(sort(-log10(ppoints(ssize))),sort(boundps[[i-3]]),pch=20,col="indianred")
#  bindinglist[[j[1]]] = abs(master[[3]][bindind,i])
#  bindinglist[[j[1]]] = bindinglist[[j[1]]][bindinglist[[j[1]]] != 5]
#  bindinglist[[j[2]]] = abs(master[[3]][-bindind,i])
#  bindinglist[[j[2]]] = bindinglist[[j[2]]][bindinglist[[j[2]]] != 5]
#  signifier = "-"
#  if(length(bindind) != 0){
#    signifier = ifelse(t.test(bindinglist[[j[1]]],bindinglist[[j[2]]])$p.value < 0.05,"*","-")
#  }
#  names(bindinglist)[j] = signifier
}
#bindps = unlist(boundps)
#simpleps = unlist(sampleps)
#top = max(max(bindps),max(simpleps))
#plot(sort(-log10(ppoints(length(bindps)))),sort(bindps),main="Master QQ Plot",
#     pch=20,col="indianred",ylim=c(0,top))
#legend("topleft",c("Bound Genes","Unbound Genes"),fill=c("indianred","black"))
#abline(a=0,b=1,lwd=2,lty="dashed",col="dodgerblue2")
#points(sort(-log10(ppoints(length(bindps)))),sort(simpleps),pch=20)
#points(sort(-log10(ppoints(length(bindps)))),sort(bindps),pch=20,col="indianred")
bindingmatrix = bindingmatrix[-1,]
percs = cbind(as.numeric(bindingmatrix[,4])/as.numeric(bindingmatrix[,3]),
as.numeric(bindingmatrix[,7])/as.numeric(bindingmatrix[,4]),
as.numeric(bindingmatrix[,8])/as.numeric(bindingmatrix[,4]),
as.numeric(bindingmatrix[,11])/as.numeric(bindingmatrix[,3]),
as.numeric(bindingmatrix[,12])/as.numeric(bindingmatrix[,11]),
as.numeric(bindingmatrix[,13])/as.numeric(bindingmatrix[,11]))
colnames(percs) = c("Bound/Total","DE/Bound","RelaxedDE/Bound","BoundPlus/Total",
"DEPlus/Bound","RelaxedDEPlus/Bound")
boxplot(percs[,4:6],ylim=c(0,1),notch=T,col=c("indianred","dodgerblue2","mediumseagreen"),
outpch=20,outcol=c("indianred","dodgerblue2","mediumseagreen"),
ylab="Fraction",cex.lab=2,las=1,cex=2,boxlwd=3,medlwd=4,
names=c("Bound Genes\nAll Genes","DE Genes (FDR 0.05)\nBound Genes","DE Genes (FDR 0.20)\nBound Genes"))
abline(v=1.5,lty="dashed")
uwins = unique(unlist(winnertfs))
kds = names(winnertfs)[1:length(winnertfs)]
tfmatrix = matrix(0,length(uwins),length(kds))
colnames(tfmatrix) = kds
rownames(tfmatrix) = uwins
for(i in 1:length(kds)){
for(j in 1:length(uwins)){
currkd = kds[i]
curruwins = uwins[j]
currwintfs = match(currkd,names(winnertfs))
if(curruwins %in% winnertfs[[currwintfs]]){
tfmatrix[j,i] = 1
}
}
}
tfs.phi = matrix(1,dim(tfmatrix)[2],dim(tfmatrix)[2])
for(i in 1:(dim(tfmatrix)[2])-1){
for(j in (i+1):dim(tfmatrix)[2]){
BC = length(which(tfmatrix[,i] == 1 & tfmatrix[,j] == 1))*length(which(tfmatrix[,i] == 0 & tfmatrix[,j] == 0))
AD = length(which(tfmatrix[,i] == 1 & tfmatrix[,j] == 0))*length(which(tfmatrix[,i] == 0 & tfmatrix[,j] == 1))
AB = sum(tfmatrix[,i])
CD = length(tfmatrix[,i]) - sum(tfmatrix[,i])
AC = length(tfmatrix[,j]) - sum(tfmatrix[,j])
BD = sum(tfmatrix[,j])
phi = (BC - AD)/(sqrt(AB)*sqrt(CD)*sqrt(AC)*sqrt(BD))
tfs.phi[i,j] = phi
tfs.phi[j,i] = phi
}
}
colnames(tfs.phi) = colnames(tfmatrix)
rownames(tfs.phi) = colnames(tfmatrix)
commoners = intersect(master[[2]][,2],rownames(resultsmatrix))
masterind = match(commoners,master[[2]][,2])
comaster = master[[2]][masterind,]
causalmatrix = matrix(NA,1711,12)
colnames(causalmatrix) = c("Gene1","Gene2","CommonTFsNOB","DisparateTFsNOB",
"CommonTFs","DisparateTFs","CommonDE","DisparateDE",
"CommonFET","DisparateFET","LeftFET","RightFET")
z=1
for(i in 1:(length(winnertfs)-1)){
for(j in (i+1):length(winnertfs)){
newline = c()
newline[1] = names(winnertfs[i])
newline[2] = names(winnertfs[j])
de1 = match(names(winnertfs)[i],colnames(comaster))
de2 = match(names(winnertfs)[j],colnames(comaster))
commonexpr = comaster[which(comaster[,de1] < 5 & comaster[,de2] < 5),2]
deind = match(commonexpr,comaster[,2])
resultsind = match(commonexpr,rownames(resultsmatrix))
#commaster = comaster[deind,]
#comresults = resultsmatrix[resultsind,]
commaster = comaster
comresults = resultsmatrix
tfs1 = winnertfs[[i]]
tfs1 = intersect(tfs1,colnames(comresults))
tfs2 = winnertfs[[j]]
tfs2 = intersect(tfs2,colnames(comresults))
alltfs1 = winnernobbers[[i]]
alltfs2 = winnernobbers[[j]]
commons = intersect(tfs1,tfs2)
newline[3] = length(intersect(alltfs1,alltfs2))
newline[4] = length(c(setdiff(alltfs1,alltfs2),setdiff(alltfs2,alltfs1)))
newline[5] = length(commons)
differs = c(setdiff(tfs1,tfs2),setdiff(tfs2,tfs1))
newline[6] = length(differs)
diffs1 = setdiff(tfs1,tfs2)
diffs2 = setdiff(tfs2,tfs1)
commonbind = c()
bind1 = c()
bind2 = c()
for(a in 1:length(commons)){
commonbind = c(commonbind,match(commons[a],colnames(comresults)))
}
for(b in 1:length(diffs1)){
bind1 = c(bind1,match(diffs1[b],colnames(comresults)))
}
for(c in 1:length(diffs2)){
bind2 = c(bind2,match(diffs2[c],colnames(comresults)))
}
winners1 = which(commaster[,de1] < 0.05)
winners2 = which(commaster[,de2] < 0.05)
cowinners = intersect(winners1,winners2)
newline[7] = length(cowinners)
colosers = c(setdiff(winners1,winners2),setdiff(winners2,winners1))
newline[8] = length(colosers)
losers1 = setdiff(winners1,winners2)
losers2 = setdiff(winners2,winners1)
commonbound = rowSums(as.matrix(comresults[,commonbind]))
commonbound = commonbound>0
commonbound = commonbound + 0
bound1 = rowSums(as.matrix(comresults[,bind1]))
bound1 = bound1>0
bound1 = bound1 + 0
bound2 = rowSums(as.matrix(comresults[,bind2]))
bound2 = bound2>0
bound2 = bound2 + 0
diffbound = rowSums(as.matrix(comresults[,c(bind1,bind2)]))
diffbound = diffbound>0
diffbound = diffbound + 0
qol = ifelse(is.na(sum(commonbound[cowinners])),0,ifelse(sum(commonbound[cowinners]) > 0,sum(commonbound[cowinners]) - 1,0))
mol = ifelse(is.na(sum(commonbound)),0,sum(commonbound))
nol = length(commonbound) - mol
kol = length(cowinners)
newline[9] = ifelse(phyper(qol,mol,nol,kol, lower.tail=FALSE)==0,1,phyper(qol,mol,nol,kol, lower.tail=FALSE))
qdiff = ifelse(sum(diffbound[colosers]) > 0,sum(diffbound[colosers]) - 1,0)
mdiff = sum(diffbound)
ndiff = length(diffbound) - mdiff
kdiff = length(colosers)
newline[10] = phyper(qdiff,mdiff,ndiff,kdiff, lower.tail=FALSE)
q1 = ifelse(sum(bound1[losers1]) > 0,sum(bound1[losers1]) - 1,0)
m1 = sum(bound1)
n1 = length(bound1) - m1
k1 = length(losers1)
newline[11] = phyper(q1,m1,n1,k1, lower.tail=FALSE)
q2 = ifelse(sum(bound2[losers2]) > 0,sum(bound2[losers2]) - 1,0)
m2 = sum(bound2)
n2 = length(bound2) - m2
k2 = length(losers2)
newline[12] = phyper(q2,m2,n2,k2, lower.tail=FALSE)
causalmatrix[z,] = newline
z = z+1
}
}
tfperccomm = as.numeric(causalmatrix[,5])/(as.numeric(causalmatrix[,5])+as.numeric(causalmatrix[,6]))
alltfperccomm = as.numeric(causalmatrix[,3])/(as.numeric(causalmatrix[,3])+as.numeric(causalmatrix[,4]))
deperccomm = as.numeric(causalmatrix[,7])/(as.numeric(causalmatrix[,7])+as.numeric(causalmatrix[,8]))
liner = lm(deperccomm ~ tfperccomm)
allliner = lm(deperccomm ~ alltfperccomm)
tfing = as.numeric(causalmatrix[,5])
tfing[which(tfing > 9)] = 10
ys = c()
yi = c()
meds = c()
xs = c(1:10,10:1)
for(i in 1:10){
ys[i] = quantile(-log10(as.numeric(causalmatrix[tfing == i,9])),probs=0.75)
yi[i] = quantile(-log10(as.numeric(causalmatrix[tfing == i,9])),probs=0.25)
meds[i] = median(-log10(as.numeric(causalmatrix[tfing == i,9])))
}
ys = c(ys,yi[10:1])
weirdspots = which(tfperccomm>0.2 & deperccomm<0.15)
plot(dtfs[,2],dtfs[,1],las=1,cex.lab=2,cex=3,
xlab="Differentially Expressed Transcription Factors",
ylab="Differentially Expressed Genes",pch=20,col="dodgerblue2")
abline(lm(dtfs[,1] ~ dtfs[,2]),lwd=4,lty="dashed")
points(dtfs[,2],dtfs[,1],cex=3,pch=20,col="dodgerblue2")
#points(dtfs[,2],dtfs[,1],cex=3,pch=21,col="gray",bg="dodgerblue2")
text(10,3500,paste("R^2 = ",round(cor(dtfs[,2],dtfs[,1],
use="pairwise.complete.obs")^2,2)),cex=2)
plot(dtfs[,3],dtfs[,1],las=1,cex.lab=2,cex=3,main="NoBindingTFs Incl.",
xlab="Differentially Expressed Transcription Factors",
ylab="Differentially Expressed Genes",pch=20,col="dodgerblue2")
abline(lm(dtfs[,1] ~ dtfs[,3]),lwd=4,lty="dashed")
points(dtfs[,3],dtfs[,1],cex=3,pch=20,col="dodgerblue2")
#points(dtfs[,3],dtfs[,1],cex=2,pch=21,col="gray",bg="dodgerblue2")
text(40,3500,paste0("R^2 = ",round(cor(dtfs[,3],dtfs[,1],
use="pairwise.complete.obs")^2,3)),cex=2)
plot(tfperccomm,deperccomm,pch=20,cex.lab=2,las=1,
xlab="Fraction of TFs DE in Common",
ylab="Fraction of Genes DE in Common",col="indianred")
abline(liner,lwd=4,lty="dashed")
text(0.1,0.35,
paste0("R^2 = ",round(cor(tfperccomm,deperccomm,use="pairwise.complete.obs")^2,2)),
cex=2)
text(0.1,0.3,
paste0("R^2 = ",round(cor(tfperccomm,deperccomm,use="pairwise.complete.obs")^2,2)),
cex=2)
plot(alltfperccomm,deperccomm,pch=20,cex.lab=2,las=1,main="NoBindingTFs Incl.",
plot(alltfperccomm,deperccomm,pch=20,cex.lab=2,las=1,main="NoBindingTFs Incl.",
xlab="Fraction of TFs DE in Common",
ylab="Fraction of Genes DE in Common",col="indianred")
abline(allliner,lwd=4,lty="dashed")
text(0.05,0.3,
paste0("R^2 = ",round(cor(alltfperccomm,deperccomm,use="pairwise.complete.obs")^2,2)),
plot(alltfperccomm,deperccomm,pch=20,cex.lab=2,las=1,main="NoBindingTFs Incl.",
xlab="Fraction of TFs DE in Common",
ylab="Fraction of Genes DE in Common",col="indianred")
abline(allliner,lwd=4,lty="dashed")
plot(alltfperccomm,deperccomm,pch=20,cex.lab=2,las=1,main="NoBindingTFs Incl.",
xlab="Fraction of TFs DE in Common",
ylab="Fraction of Genes DE in Common",col="indianred")
abline(allliner,lwd=4,lty="dashed")
text(0.05,0.3,
paste0("R^2 = ",round(cor(alltfperccomm,deperccomm,use="pairwise.complete.obs")^2,2)),
cex=2)
plot(1:10,1:10,type="n",ylim=c(min(ys),max(ys)),las=1,cex.lab=2,xaxt="n",
xlab = "No. DE TFs in Common",ylab = "Degree of Binding")
axis(side=1,at=1:10,labels=c(1:9,"10+"))
polygon(xs,ys,col="mediumseagreen",border="mediumseagreen")
lines(meds,type="b",lwd=3)
inder = rep(10,length(alltfperccomm[causalmatrix[,3] != 0]))
reorg = order(alltfperccomm[causalmatrix[,3] != 0])
inder[1:(round(length(alltfperccomm[causalmatrix[,3] != 0])/10,0)*9)] = rep(c(1:9),
each=round(length(alltfperccomm[causalmatrix[,3] != 0])/10,0))
boxer = cbind(as.factor(inder),
-log10(as.numeric(causalmatrix[causalmatrix[,3] != 0,9][reorg])))
boxplot(boxer[,2] ~ boxer[,1],notch=T,outline=F,las=1,cex=2,
xlab="Fraction Common TFs Decile",ylab="Common Binding Score",cex.lab=2,
col="mediumseagreen",boxlwd=3,medlwd=4)
10^(-.5)
permer = c()
for(i in 4:dim(master[[2]])[2]){
permer[i-3] = length(which(master[[2]][,i] < 5))
}
perms = cbind(permer,dtfs)
commoners = list()
for(i in 4:dim(master[[2]])[2]){
commoners[[i-3]] = intersect(unique(master[[2]][which(master[[2]][,i]< 5),2]),rownames(resultsmatrix))
}
t
winning = unique(c(factors[,3],nobbers[,2]))
rounds = 1000
rpermingtf = matrix(NA,1711,rounds)
rpermingde = matrix(NA,1711,rounds)
#for(t in 1:100){
for(t in 1:rounds){
if(t%%100 == 0){print(t)}
holder = matrix(NA,1711,2)
s=1
for(i in 1:(dim(perms)[1]-1)){
for(j in (i+1):dim(perms)[1]){
deperms1 = sample(commoners[[i]],perms[i,2])
deperms2 = sample(commoners[[j]],perms[j,2])
tfs1 = intersect(deperms1,winning)
tfs2 = intersect(deperms2,winning)
holder[s,1] = length(intersect(deperms1,deperms2))/length(union(deperms1,deperms2))
holder[s,2] = length(intersect(tfs1,tfs2))/length(union(tfs1,tfs2))
if(length(union(tfs1,tfs2)) == 0){
holder[s,2] = 0
}
s = s+1
}
}
rpermingtf[,t] = holder[,2]
rpermingde[,t] = holder[,1]
}
meanerstf = apply(rpermingtf,1,mean)
sderstf = apply(rpermingtf,1,sd)
differstf = abs(rpermingtf - meanerstf)
compartf = differstf - abs(alltfperccomm - meanerstf)
tfps = rowSums(compartf > 0)/dim(rpermingtf)[2]
tfts = (alltfperccomm - meanerstf)/ifelse(sderstf > 0,sderstf,1)
tfpermts = apply(rpermingtf,2,function(x){(x - meanerstf)/ifelse(sderstf > 0,sderstf,1)})
tfpermsorts = apply(tfpermts,2,sort)
conferlowtfts = apply(tfpermsorts,1,function(x){quantile(x,0.05)})
conferhitfts = apply(tfpermsorts,1,function(x){quantile(x,0.95)})
nullts = qt(ppoints(length(alltfperccomm)),df=length(alltfperccomm)-2)
plot(sort(nullts),sort(tfts),main="All TFs",xlab="Expected",ylab="Observed",
pch=20,las=1,cex.lab=2,type="n")
polygon(c(sort(nullts),sort(nullts,decreasing=T)),c(sort(conferlowtfts),sort(conferhitfts,decreasing=T)),col="gray",border="gray")
abline(a=0,b=1,lwd=2,col="dodgerblue2",lty="dashed")
points(sort(nullts),sort(tfts),col="indianred",pch=20)
meanersde = apply(rpermingde,1,mean)
sdersde = apply(rpermingde,1,sd)
differsde = abs(rpermingde - meanersde)
comparde = differsde - abs(deperccomm - meanersde)
deps = rowSums(comparde > 0)/dim(rpermingde)[2]
dets = (deperccomm - meanersde)/sdersde
depermts = apply(rpermingde,2,function(x){(x - meanersde)/ifelse(sdersde > 0,sdersde,1)})
depermsorts = apply(depermts,2,sort)
conferlowdets = apply(depermsorts,1,function(x){quantile(x,0.05)})
conferhidets = apply(depermsorts,1,function(x){quantile(x,0.95)})
nulldets = qt(ppoints(length(deperccomm)),df=length(deperccomm)-2)
plot(sort(nulldets),sort(dets),xlim=c(min(nulldets,conferlowdets),max(nulldets,conferhidets)),
ylim=c(min(dets,conferlowdets),max(dets,conferhidets)),main="All DE",xlab="Expected",ylab="Observed",
pch=20,las=1,cex.lab=2,type="n")
polygon(c(sort(nulldets),sort(nulldets,decreasing=T)),c(sort(conferlowdets),sort(conferhidets,decreasing=T)),col="gray",border="gray")
abline(a=0,b=1,lwd=2,col="dodgerblue2",lty="dashed")
points(sort(nulldets),sort(dets),col="indianred",pch=20)
medstf = apply(rpermingtf,2,median)
diffingtf = abs(medstf - mean(medstf))
comparatf = diffingtf - abs(median(alltfperccomm) - mean(medstf))
tfp = length(which(comparatf > 0))/dim(rpermingtf)[2]
medsde = apply(rpermingde,2,median)
diffingde = abs(medsde - mean(medsde))
comparade = diffingde - abs(median(deperccomm) - mean(medsde))
dep = length(which(comparade > 0))/dim(rpermingde)[2]
bottom = min(median(alltfperccomm),median(deperccomm),medsde,medstf)
top = max(median(alltfperccomm),median(deperccomm),medsde,medstf)
par(mar=c(5, 6, 4, 4) + 0.1)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
points(c(1,2),c(median(alltfperccomm),median(deperccomm)),pch=8,cex=3,lwd=2,
col="indianred")
points(c(1,2),c(median(alltfperccomm),median(deperccomm)),pch=8,cex=3,lwd=4,
col="indianred")
par(mar=c(5, 10, 4, 4) + 0.1)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
points(c(1,2),c(median(alltfperccomm),median(deperccomm)),pch=8,cex=3,lwd=4,
col="indianred")
par(mar=c(2, 10, 2, 6) + 0.1)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
points(c(1,2),c(median(alltfperccomm),median(deperccomm)),pch=8,cex=3,lwd=4,
col="indianred")
pdf("test2.pdf")
par(mar=c(2, 10, 2, 6) + 0.1)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
points(c(1,2),c(median(alltfperccomm),median(deperccomm)),pch=8,cex=3,lwd=4,
col="indianred")
dev.off()
pdf("test2.pdf")
par(mar=c(2, 8, 2, 6) + 0.1)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
points(c(1,2),c(median(alltfperccomm),median(deperccomm)),pch=8,cex=3,lwd=3,
col="indianred")
dev.off()
par(mar=c(2, 4, 2, 8) + 0.1)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
par(mar=c(2, 8, 2, 6) + 0.1)
mgp=c(3,2,0)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
mgp=c(3,2,1)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
mgp=c(3,3,3)
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
par(mgp=c(3,2,0))
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
par(mgp=c(3,1,1))
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
par(mgp=c(4,1,0))
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
points(c(1,2),c(median(alltfperccomm),median(deperccomm)),pch=8,cex=3,lwd=3,
)
pdf("test2.pdf")
par(mfrow=c(1,1))
par(mar=c(2, 8, 2, 6) + 0.1)
par(mgp=c(4,1,0))
boxplot(medstf,medsde,ylim=c(bottom,top),names=c("All TFs","All DE"),notch=T,
outline=F,las=1,cex=2,ylab="Median Degree Sharing",cex.lab=2,
col="dodgerblue2",boxlwd=3,medlwd=4)
points(c(1,2),c(median(alltfperccomm),median(deperccomm)),pch=8,cex=3,lwd=3,
col="indianred")
dev.off()
test = read.table(gzfile("~/data/References/HumanHT-12_V4_0_R2_15002873_B.txt.gz"))
test = read.table(gzfile("~/data/References/HumanHT-12_V4_0_R2_15002873_B.txt.gz"),sep="\t")
test = read.table(gzfile("~/data/References/HumanHT-12_V4_0_R2_15002873_B.txt.gz"),sep=" ")
test = read.table(gzfile("~/data/References/HumanHT-12_V4_0_R2_15002873_B.txt.gz"),skiplines=8)
test = read.table(gzfile("~/data/References/HumanHT-12_V4_0_R2_15002873_B.txt.gz"),skip=8)
test = read.table(gzfile("~/data/References/HumanHT-12_V4_0_R2_15002873_B.txt.gz"),skip=8,fill=NA)
test[1:5,1:5]
test[1:5,1:7]
colnames(test) = test[1,]
colnames(test)
colnames(test) = as.numeric(test[1,])
colnames(test)
colnames(test) = as.character(test[1,])
colnames(test)
as.character(test[1,])
as.factor(test[1,])
test[1,]
c(test[1,])
test[1,1]
test[1,1][1]
as.charactertest[1,1][1])
as.character(test[1,1][1])
as.character(test[1,1])
as.character(test[1,1:@])
as.character(test[1,1:2])
for(i in 1:dim(test)[2]){colnames(test)[i] = as.character(test[1,i])}
colnames(test)
test[1:5,1:5]
test = test[-1,]
test[1:5,1:5]
head(test$Source)
test = read.table(gzfile("~/data/References/HumanHT-12_V4_0_R2_15002873_B.txt.gz"),skip=8,fill=NA,header=T,sep="\t")
test[1:5,1:5]
genes = read.table("~/home/Kd_Arrays/Analysis/Annotations/TargetSummary.txt")
head(genes)
probereport = read.table("/mnt/lustre/home/cusanovich/Kd_Arrays/Analysis/Annotations/HT-12v4R2_Probes_inhg19EnsemblGenes_NoGM19238SNPs_NoChrY_Stranded_OneProbePerGene_alt.txt",header=T)
probereport = read.table("~/home/Kd_Arrays/Analysis/Annotations/HT-12v4R2_Probes_inhg19EnsemblGenes_NoGM19238SNPs_NoChrY_Stranded_OneProbePerGene_alt.txt",header=T)
head(probereport)
geneprobes = colnames(test)
colnames(test)
test[1,]
test[100,]
head(genes)
match(genes$V1,test[,11])
match(genes$V1,test[,12])
genes[which(is.na(match(genes$V1,test[,12]))),]
head(probereport)
genes[which(is.na(match(genes$V3,probereport[,7]))),]
grep("NM_001257408",test[,6])
grep("NM_006084",test[,6])
test[12016,]
